{"version":3,"sources":["TipForm.jsx","App.jsx","index.js"],"names":["TipForm","handleClick","handleChange","calulateTipPayOut","hourlyRate","Form","onChange","style","background","padding","border","margin","Group","controlId","Label","Control","type","placeholder","name","required","Text","className","Button","variant","onClick","float","App","useState","totalTipAmount","totalTippableHours","hourlyTipRate","hoursWorked","payOut","showPayOut","formData","setFormData","Container","fluid","textAlign","marginBottom","e","parsedValue","parseFloat","target","value","newFormData","error","console","hrTipRate","tipPayOut","Math","round","fontWeight","color","fontSize","toFixed","rootElement","document","getElementById","ReactDOM","render"],"mappings":"oNAGe,SAASA,EAAT,GAKX,IAJFC,EAIC,EAJDA,YACAC,EAGC,EAHDA,aACAC,EAEC,EAFDA,kBAEC,EADDC,WAEA,OACE,eAACC,EAAA,EAAD,CACEC,SAAUJ,EACVK,MAAO,CACLC,WAAY,YACZC,QAAS,OACTC,OAAQ,qBACRC,OAAQ,QANZ,UASE,eAACN,EAAA,EAAKO,MAAN,CAAYC,UAAU,qBAAtB,UACE,cAACR,EAAA,EAAKS,MAAN,gCACA,cAACT,EAAA,EAAKU,QAAN,CACEC,KAAK,OACLC,YAAY,UACZC,KAAK,iBACLC,UAAQ,IAEV,cAACd,EAAA,EAAKe,KAAN,CAAWC,UAAU,aAArB,6CAIF,eAAChB,EAAA,EAAKO,MAAN,CAAYC,UAAU,uBAAtB,UACE,cAACR,EAAA,EAAKS,MAAN,oCACA,cAACT,EAAA,EAAKU,QAAN,CACEC,KAAK,OACLC,YAAY,aACZC,KAAK,qBACLC,UAAQ,OAGZ,eAACd,EAAA,EAAKO,MAAN,CAAYC,UAAU,kBAAtB,UACE,cAACR,EAAA,EAAKS,MAAN,8CACA,cAACT,EAAA,EAAKU,QAAN,CACEC,KAAK,OACLC,YAAY,aACZC,KAAK,cACLC,UAAQ,OAGZ,cAACG,EAAA,EAAD,CAAQC,QAAQ,UAAUP,KAAK,SAASQ,QAASrB,EAAjD,uBAGA,cAACmB,EAAA,EAAD,CACEf,MAAO,CAAEkB,MAAO,SAChBF,QAAQ,SACRP,KAAK,QACLQ,QAASvB,EAJX,sBC/CS,SAASyB,IAAO,IAAD,EACIC,mBAAS,CACvCC,eAAgB,EAChBC,mBAAoB,EACpBC,cAAe,EACfC,YAAa,EACbC,OAAQ,EACRC,YAAY,IAPc,mBACrBC,EADqB,KACXC,EADW,KAmD5B,OACE,eAACC,EAAA,EAAD,CAAWC,OAAK,EAAhB,UACE,oBAAI9B,MAAO,CAAE+B,UAAW,SAAUC,aAAc,SAAhD,yCAGA,cAACvC,EAAD,CACEC,YAjBc,WAClBkC,EAAY,CACVP,eAAgB,EAChBC,mBAAoB,EACpBC,cAAe,EACfC,YAAa,EACbC,OAAQ,EACRC,YAAY,KAWV/B,aA/Be,SAACsC,GACpB,IACE,IAAIC,EAAcC,WAAWF,EAAEG,OAAOC,QAAU,EAC1CC,EAAW,2BACZX,GADY,IAEf,CAACM,EAAEG,OAAOzB,MAAOuB,IAEnBN,EAAYU,GACZ,MAAOC,GACPC,QAAQD,MAAMA,KAuBZ3C,kBAlDoB,WACxB,GACE+B,EAASN,gBACTM,EAASL,oBACTK,EAASH,YACT,CACA,IAAIiB,EAAYd,EAASN,eAAiBM,EAASL,mBAC/CoB,EAAYC,KAAKC,MAAMH,EAAYd,EAASH,aAChDI,EAAY,2BACPD,GACA,CACDJ,cAAekB,EACfhB,OAAQiB,EACRhB,YAAY,SAuCfC,EAASD,YACR,qCACE,oBACE1B,MAAO,CACL6C,WAAY,SACZC,MAAO,QACPf,UAAW,SACXgB,SAAU,UALd,oCAQ0BpB,EAASF,UAEnC,mBACEzB,MAAO,CACL8C,MAAO,QACPf,UAAW,SACXgB,SAAU,SAJd,SAOGpB,EAASJ,cAAT,6BACyBI,EAASJ,cAAcyB,QAAQ,IACrD,WClFhB,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAAClC,EAAD,MAEF8B,K","file":"static/js/main.5b5dcf4e.chunk.js","sourcesContent":["import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Button, Form } from \"react-bootstrap\";\n\nexport default function TipForm({\n  handleClick,\n  handleChange,\n  calulateTipPayOut,\n  hourlyRate\n}) {\n  return (\n    <Form\n      onChange={handleChange}\n      style={{\n        background: \"lightgray\",\n        padding: \"1rem\",\n        border: \"black solid .05rem\",\n        margin: \"1rem\"\n      }}\n    >\n      <Form.Group controlId=\"formTotalTipAmount\">\n        <Form.Label>Total Tip Amount:</Form.Label>\n        <Form.Control\n          type=\"text\"\n          placeholder=\"$000.00\"\n          name=\"totalTipAmount\"\n          required\n        />\n        <Form.Text className=\"text-muted\">\n          Please omit currency symbol.\n        </Form.Text>\n      </Form.Group>\n      <Form.Group controlId=\"formTotalHoursWorked\">\n        <Form.Label>Total Tippable Hours:</Form.Label>\n        <Form.Control\n          type=\"text\"\n          placeholder=\"000.00 hrs\"\n          name=\"totalTippableHours\"\n          required\n        />\n      </Form.Group>\n      <Form.Group controlId=\"formHoursWorked\">\n        <Form.Label>Total Hours Worked by Employee:</Form.Label>\n        <Form.Control\n          type=\"text\"\n          placeholder=\"000.00 hrs\"\n          name=\"hoursWorked\"\n          required\n        />\n      </Form.Group>\n      <Button variant=\"success\" type=\"button\" onClick={calulateTipPayOut}>\n        Calculate\n      </Button>\n      <Button\n        style={{ float: \"right\" }}\n        variant=\"danger\"\n        type=\"reset\"\n        onClick={handleClick}\n      >\n        Reset\n      </Button>\n    </Form>\n  );\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container } from \"react-bootstrap\";\nimport { useState } from \"react\";\nimport TipForm from \"./TipForm\";\n\nexport default function App() {\n  const [formData, setFormData] = useState({\n    totalTipAmount: 0,\n    totalTippableHours: 0,\n    hourlyTipRate: 0,\n    hoursWorked: 0,\n    payOut: 0,\n    showPayOut: false\n  });\n  const calulateTipPayOut = () => {\n    if (\n      formData.totalTipAmount &&\n      formData.totalTippableHours &&\n      formData.hoursWorked\n    ) {\n      let hrTipRate = formData.totalTipAmount / formData.totalTippableHours;\n      let tipPayOut = Math.round(hrTipRate * formData.hoursWorked);\n      setFormData({\n        ...formData,\n        ...{\n          hourlyTipRate: hrTipRate,\n          payOut: tipPayOut,\n          showPayOut: true\n        }\n      });\n    }\n  };\n  const handleChange = (e) => {\n    try {\n      let parsedValue = parseFloat(e.target.value) || 0;\n      const newFormData = {\n        ...formData,\n        [e.target.name]: parsedValue\n      };\n      setFormData(newFormData);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleClick = () => {\n    setFormData({\n      totalTipAmount: 0,\n      totalTippableHours: 0,\n      hourlyTipRate: 0,\n      hoursWorked: 0,\n      payOut: 0,\n      showPayOut: false\n    });\n  };\n\n  return (\n    <Container fluid>\n      <h1 style={{ textAlign: \"center\", marginBottom: \".7rem\" }}>\n        Tip Distribution Calculator\n      </h1>\n      <TipForm\n        handleClick={handleClick}\n        handleChange={handleChange}\n        calulateTipPayOut={calulateTipPayOut}\n      />\n      {formData.showPayOut && (\n        <>\n          <p\n            style={{\n              fontWeight: \"bolder\",\n              color: \"black\",\n              textAlign: \"center\",\n              fontSize: \"1.5rem\"\n            }}\n          >\n            Employee Tip Pay Out: ${formData.payOut}\n          </p>\n          <p\n            style={{\n              color: \"black\",\n              textAlign: \"center\",\n              fontSize: \"1 rem\"\n            }}\n          >\n            {formData.hourlyTipRate\n              ? `Tip Rate Per Hour $${formData.hourlyTipRate.toFixed(2)}`\n              : \"\"}\n          </p>\n        </>\n      )}\n    </Container>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}